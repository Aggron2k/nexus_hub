// prisma/seed.ts
import { PrismaClient, Role } from '@prisma/client';
import bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function main() {
    console.log('üå± Adatb√°zis seed ind√≠t√°sa...');

    // T√∂r√∂l√ºnk minden megl√©v≈ë adatot (opcion√°lis)
    console.log('üìù Megl√©v≈ë adatok t√∂rl√©se...');
    await prisma.todo.deleteMany();
    await prisma.user.deleteMany();
    await prisma.position.deleteMany();

    console.log('üè¢ Poz√≠ci√≥k l√©trehoz√°sa...');

    // Alap√©rtelmezett poz√≠ci√≥k l√©trehoz√°sa
    const positions = await Promise.all([
        prisma.position.create({
            data: {
                name: 'cashier',
                displayNames: {
                    en: 'Cashier',
                    hu: 'P√©nzt√°ros'
                },
                descriptions: {
                    en: 'Customer service and payment processing',
                    hu: 'P√©nzt√°rg√©p kezel√©se, √ºgyf√©lszolg√°lat'
                },
                isActive: true,
                color: '#10B981', // z√∂ld
                order: 1
            }
        }),

        prisma.position.create({
            data: {
                name: 'kitchen',
                displayNames: {
                    en: 'Kitchen',
                    hu: 'Konyha'
                },
                descriptions: {
                    en: 'Kitchen and food preparation',
                    hu: '√âtelk√©sz√≠t√©s, konyhai munk√°k'
                },
                isActive: true,
                color: '#F59E0B', // s√°rga
                order: 2
            }
        }),

        prisma.position.create({
            data: {
                name: 'storage',
                displayNames: {
                    en: 'Storage',
                    hu: 'Rakt√°r'
                },
                descriptions: {
                    en: 'Inventory and warehouse management',
                    hu: 'Rakt√°rkezel√©s, k√©szletnyilv√°ntart√°s'
                },
                isActive: true,
                color: '#3B82F6', // k√©k
                order: 3
            }
        }),

        prisma.position.create({
            data: {
                name: 'packer',
                displayNames: {
                    en: 'Packer',
                    hu: 'Csomagol√≥'
                },
                descriptions: {
                    en: 'Product packaging and preparation',
                    hu: 'Term√©kek csomagol√°sa, kisz√°ll√≠t√°s el≈ëk√©sz√≠t√©se'
                },
                isActive: true,
                color: '#8B5CF6', // lila
                order: 4
            }
        }),

        prisma.position.create({
            data: {
                name: 'delivery',
                displayNames: {
                    en: 'Delivery',
                    hu: 'Kisz√°ll√≠t√≥'
                },
                descriptions: {
                    en: 'Home delivery and logistics',
                    hu: 'H√°zhozsz√°ll√≠t√°s, logisztika'
                },
                isActive: true,
                color: '#EF4444', // piros
                order: 5
            }
        }),

        prisma.position.create({
            data: {
                name: 'cleaning',
                displayNames: {
                    en: 'Cleaning',
                    hu: 'Takar√≠t√≥'
                },
                descriptions: {
                    en: 'Cleaning and maintenance',
                    hu: 'Tiszt√°ntart√°s, higi√©nia'
                },
                isActive: false, // P√©lda inakt√≠v poz√≠ci√≥ra
                color: '#6B7280', // sz√ºrke
                order: 6
            }
        })
    ]);

    console.log(`‚úÖ ${positions.length} poz√≠ci√≥ l√©trehozva!`);

    console.log('üë• Felhaszn√°l√≥k l√©trehoz√°sa...');

    // Hash a default password
    const hashedPassword = await bcrypt.hash('password123', 12);

    // CEO l√©trehoz√°sa
    const ceoUser = await prisma.user.create({
        data: {
            name: 'Horv√°th Kriszti√°n',
            email: 'kriszcs04@gmail.com',
            hashedPassword,
            role: Role.CEO,
            positionId: positions[1].id, // Kitchen
            image: 'https://avatars.githubusercontent.com/u/40773732?v=4'
        }
    });

    // Update positions to track who created them
    await prisma.position.updateMany({
        data: {
            createdById: ceoUser.id
        }
    });

    // Tov√°bbi felhaszn√°l√≥k
    const users = await Promise.all([
        // General Manager
        prisma.user.create({
            data: {
                name: 'Nagy Anna',
                email: 'anna.nagy@company.com',
                hashedPassword,
                role: Role.GeneralManager,
                positionId: positions[2].id, // Storage
                image: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face'
            }
        }),

        // Manager
        prisma.user.create({
            data: {
                name: 'Kov√°cs P√©ter',
                email: 'peter.kovacs@company.com',
                hashedPassword,
                role: Role.Manager,
                positionId: positions[1].id, // Kitchen
                image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face'
            }
        }),

        // Employee 1 - Cashier
        prisma.user.create({
            data: {
                name: 'T√≥th M√°ria',
                email: 'maria.toth@company.com',
                hashedPassword,
                role: Role.Employee,
                positionId: positions[0].id, // Cashier
                image: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face'
            }
        }),

        // Employee 2 - Packer
        prisma.user.create({
            data: {
                name: 'Szab√≥ J√°nos',
                email: 'janos.szabo@company.com',
                hashedPassword,
                role: Role.Employee,
                positionId: positions[3].id, // Packer
                image: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face'
            }
        }),

        // Employee 3 - Delivery
        prisma.user.create({
            data: {
                name: 'Kiss Zolt√°n',
                email: 'zoltan.kiss@company.com',
                hashedPassword,
                role: Role.Employee,
                positionId: positions[4].id, // Delivery
                image: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=150&h=150&fit=crop&crop=face'
            }
        })
    ]);

    const allUsers = [ceoUser, ...users];
    console.log(`‚úÖ ${allUsers.length} felhaszn√°l√≥ l√©trehozva!`);

    // Sample TODO-k l√©trehoz√°sa
    console.log('üìã Minta TODO-k l√©trehoz√°sa...');

    const sampleTodos = await Promise.all([
        // CEO √°ltal l√©trehozott TODO a Manager-nek
        prisma.todo.create({
            data: {
                title: 'Havi jelent√©s elk√©sz√≠t√©se',
                description: 'K√©sz√≠tsd el a havi √©rt√©kes√≠t√©si jelent√©st √©s k√ºldd el a vezet≈ës√©gnek.',
                priority: 'HIGH',
                dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
                targetPositionId: positions[1].id, // Kitchen
                assignedUserId: users[1].id, // Manager
                createdById: ceoUser.id,
                notes: 'K√©rlek add hozz√° a grafikus elemz√©seket is.'
            }
        }),

        // Manager √°ltal l√©trehozott TODO az Employee-nak
        prisma.todo.create({
            data: {
                title: 'Rakt√°r lelt√°roz√°sa',
                description: 'V√©gezd el a teljes rakt√°ri lelt√°rt √©s friss√≠tsd a rendszerben.',
                priority: 'MEDIUM',
                dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),
                targetPositionId: positions[0].id, // Cashier
                assignedUserId: users[2].id, // Employee 1
                createdById: users[1].id, // Manager
                notes: 'K√ºl√∂n√∂s figyelmet ford√≠ts a lej√°rati d√°tumokra.'
            }
        }),

        // S√ºrg≈ës TODO
        prisma.todo.create({
            data: {
                title: 'Csomagol√°si hiba jav√≠t√°sa',
                description: 'A reggeli m≈±szakban t√∂rt√©nt csomagol√°si hib√°t orvosolni kell.',
                priority: 'URGENT',
                dueDate: new Date(Date.now() + 2 * 60 * 60 * 1000),
                targetPositionId: positions[3].id, // Packer
                assignedUserId: users[3].id, // Employee 2
                createdById: users[0].id, // General Manager
                notes: 'S√úRG≈êS! Azonnal kezelend≈ë!'
            }
        }),

        // Kisz√°ll√≠t√°si TODO
        prisma.todo.create({
            data: {
                title: 'D√©lut√°ni kisz√°ll√≠t√°sok',
                description: 'D√©lut√°n 3 √≥r√°ig minden megrendel√©st ki kell sz√°ll√≠tani.',
                priority: 'HIGH',
                dueDate: new Date(Date.now() + 5 * 60 * 60 * 1000),
                targetPositionId: positions[4].id, // Delivery
                assignedUserId: users[4].id, // Employee 3
                createdById: users[1].id, // Manager
                notes: 'GPS koordin√°t√°k mell√©kelve minden c√≠mhez.'
            }
        })
    ]);

    console.log(`‚úÖ ${sampleTodos.length} minta TODO l√©trehozva!`);

    // √ñsszefoglal√≥ statistik√°k
    console.log('\nüìä Seed eredm√©nyek:');
    console.log('===================');

    console.log('\nüè¢ Poz√≠ci√≥k:');
    for (const position of positions) {
        const userCount = await prisma.user.count({
            where: { positionId: position.id }
        });
        const todoCount = await prisma.todo.count({
            where: { targetPositionId: position.id }
        });
        const status = position.isActive ? '‚úÖ' : '‚ùå';
        const displayName = (position.displayNames as any).hu || position.name;
        console.log(`${status} ${displayName} (${position.name}) - ${userCount} felhaszn√°l√≥, ${todoCount} TODO`);
    }

    console.log('\nüë• Felhaszn√°l√≥k:');
    for (const user of allUsers) {
        const position = await prisma.position.findUnique({
            where: { id: user.positionId! }
        });
        const todoCount = await prisma.todo.count({
            where: { assignedUserId: user.id }
        });
        const positionName = position ? (position.displayNames as any)?.hu || position.name : 'Nincs poz√≠ci√≥';
        console.log(`üë§ ${user.name} (${user.role}) - ${positionName} - ${todoCount} TODO`);
    }

    console.log('\nüéâ Seed sikeresen befejezve!');
    console.log('üìù Alap√©rtelmezett jelsz√≥ minden felhaszn√°l√≥nak: password123');
    console.log('üîê Bejelentkez√©s: kriszcs04@gmail.com / password123 (CEO)');
    console.log('\nüí° Poz√≠ci√≥k menedzsment el√©rhet≈ë lesz a /admin/positions √∫tvonalon');
}

main()
    .catch((e) => {
        console.error('‚ùå Seed hiba:', e);
        process.exit(1);
    })
    .finally(async () => {
        await prisma.$disconnect();
    });