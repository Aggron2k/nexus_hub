// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  Employee
  Manager
  GeneralManager
  CEO
}

enum TodoStatus {
  PENDING     // Várakozik
  IN_PROGRESS // Folyamatban
  COMPLETED   // Befejezve
  OVERDUE     // Lejárt
}

enum TodoPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Új Position model - dinamikus pozíciók
model Position {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique // pl. "kitchen", "cashier" - kulcs azonosító
  
  // Többnyelvű megjelenítési nevek
  displayNames Json // { "en": "Kitchen", "hu": "Konyha" }
  descriptions Json? // { "en": "Kitchen staff", "hu": "Konyhai dolgozók" }
  
  isActive Boolean @default(true)
  color String @default("#3B82F6")
  order Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdById String? @db.ObjectId
  
  // Kapcsolatok
  users User[]
  todos Todo[]
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role @default(Employee)
  
  // Position kapcsolat - most már referencia a Position model-re
  positionId String? @db.ObjectId
  position Position? @relation(fields: [positionId], references: [id])

  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]
  documents Document[]

  // TODO kapcsolatok
  assignedTodos Todo[] @relation("AssignedUser")
  createdTodos Todo[] @relation("CreatedBy")
  
  // Position létrehozás kapcsolatot eltávolítottuk a ciklikus referencia elkerülése érdekében
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?
  
  messagesIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Document {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  fileType   String
  fileUrl    String
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Todo {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  // Alapvető információk
  title String
  description String?
  
  // Státusz és prioritás
  status TodoStatus @default(PENDING)
  priority TodoPriority @default(MEDIUM)
  
  // Dátumok
  startDate DateTime?
  dueDate DateTime?
  completedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Hozzárendelések
  assignedUserId String @db.ObjectId
  assignedUser User @relation("AssignedUser", fields: [assignedUserId], references: [id], onDelete: Cascade)
  
  createdById String @db.ObjectId
  createdBy User @relation("CreatedBy", fields: [createdById], references: [id])
  
  // Position kapcsolat - most már referencia
  targetPositionId String? @db.ObjectId
  targetPosition Position? @relation(fields: [targetPositionId], references: [id])
  
  // Megjegyzések
  notes String?
  
  @@index([assignedUserId])
  @@index([status])
  @@index([dueDate])
  @@index([targetPositionId])
}