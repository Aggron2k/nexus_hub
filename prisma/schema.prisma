// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  Employee
  Manager
  GeneralManager
  CEO
}

enum Position {
  Cashier
  Kitchen
  Storage
  Packer
}

enum TodoStatus {
  PENDING     // Várakozik
  IN_PROGRESS // Folyamatban
  COMPLETED   // Befejezve
  OVERDUE     // Lejárt
}

enum TodoPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role @default(Employee)
  position Position? // Új mező a pozícióhoz

  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]
  documents Document[]

  // TODO kapcsolatok
  assignedTodos Todo[] @relation("AssignedUser") // Hozzárendelt TODO-k
  createdTodos Todo[] @relation("CreatedBy") // Általa létrehozott TODO-k
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?
  
  messagesIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Document {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   // A dokumentum neve, pl. "CV", "Bérpapír"
  fileType   String   // A fájl típusa, pl. "pdf" vagy "docx"
  fileUrl    String   // A fájl elérési útvonala (pl. Amazon S3 URL vagy helyi fájlrendszer)
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Todo {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  // Alapvető információk
  title String // Feladat címe
  description String? // Részletes leírás
  
  // Státusz és prioritás
  status TodoStatus @default(PENDING)
  priority TodoPriority @default(MEDIUM)
  
  // Dátumok
  startDate DateTime? // Mikor kell elkezdeni
  dueDate DateTime? // Határidő
  completedAt DateTime? // Mikor lett befejezve
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Hozzárendelések
  assignedUserId String @db.ObjectId
  assignedUser User @relation("AssignedUser", fields: [assignedUserId], references: [id], onDelete: Cascade)
  
  createdById String @db.ObjectId
  createdBy User @relation("CreatedBy", fields: [createdById], references: [id])
  
  // Pozíció specifikus hozzárendelés
  targetPosition Position? // Ha meg van adva, akkor csak az adott pozíciójú emberek kapják
  
  // Megjegyzések/kommentek
  notes String? // Extra megjegyzések a feladathoz
  
  @@index([assignedUserId])
  @@index([status])
  @@index([dueDate])
  @@index([targetPosition])
}