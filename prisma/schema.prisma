// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  Employee
  Manager
  GeneralManager
  CEO
}

enum TodoStatus {
  PENDING     // Várakozik
  IN_PROGRESS // Folyamatban
  COMPLETED   // Befejezve
  OVERDUE     // Lejárt
}

enum TodoPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EmploymentStatus {
  ACTIVE      // Aktív
  INACTIVE    // Inaktív
  SUSPENDED   // Felfüggesztve
  TERMINATED  // Megszüntetett
}

enum ShiftRequestType {
  SPECIFIC_TIME    // Konkrét időpont (pl. 7:00-15:00)
  AVAILABLE_ALL_DAY // Egész nap elérhető
  TIME_OFF         // Szabadság/Időkérés
}

enum ShiftRequestStatus {
  PENDING          // Várakozik jóváhagyásra
  APPROVED         // Jóváhagyva
  REJECTED         // Elutasítva
  CONVERTED_TO_SHIFT // Műszakká alakítva
}

enum ActualWorkStatus {
  PRESENT          // Jelen volt
  SICK             // Beteg volt
  ABSENT           // Hiányzott (igazolatlan)
}

// Új Position model - dinamikus pozíciók
model Position {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique // pl. "kitchen", "cashier" - kulcs azonosító
  
  // Többnyelvű megjelenítési nevek
  displayNames Json // { "en": "Kitchen", "hu": "Konyha" }
  descriptions Json? // { "en": "Kitchen staff", "hu": "Konyhai dolgozók" }
  
  isActive Boolean @default(true)
  color String @default("#3B82F6")
  order Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdById String? @db.ObjectId

  // Kapcsolatok - many-to-many a User-rel
  userPositions UserPosition[]
  todos Todo[]
  shifts Shift[] @relation("ShiftPosition")
  shiftRequests ShiftRequest[] @relation("ShiftRequestPosition")
}

// Many-to-many kapcsolótábla User és Position között
model UserPosition {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  positionId String @db.ObjectId
  position Position @relation(fields: [positionId], references: [id], onDelete: Cascade)
  
  // Meta információk
  isPrimary Boolean @default(false) // Elsődleges pozíció jelölése
  assignedAt DateTime @default(now())
  assignedBy String? @db.ObjectId // Ki rendelte hozzá
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Egyedi kapcsolat - egy user-position pár csak egyszer lehet
  @@unique([userId, positionId])
  @@index([userId])
  @@index([positionId])
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role @default(Employee)
  
  // Positions kapcsolat - many-to-many a UserPosition táblán keresztül
  userPositions UserPosition[]

  // ÚJ MUNKAVÁLLALÓI MEZŐK
  // Munkavállaló azonosító
  employeeId String? // pl. "EMP001", "EMP002" - egyedi, de nem kötelező
  
  // Telefonszám
  phoneNumber String?
  
  // Munkavállalói állapot
  employmentStatus EmploymentStatus @default(ACTIVE)
  
  // Heti munkaidő (órában)
  weeklyWorkHours Int? // pl. 40, 20, 8

  // Heti elvárt munkaórák (célérték)
  weeklyRequiredHours Float? @default(40) // pl. 40.0
  
  // Születési hely
  birthCountry String? // pl. "Magyarország", "Hungary"
  birthCity String? // pl. "Budapest", "Szeged"
  
  // Banki adatok
  bankName String? // pl. "OTP Bank", "Erste Bank"
  accountNumber String? // pl. "12345678-12345678-12345678"
  
  // Születési dátum
  birthDate DateTime?
  
  // Címadatok
  address String?
  city String?
  postalCode String?
  country String?
  
  // Személyes adatok
  personalIdNumber String? // személyi igazolvány száma
  taxNumber String? // adószám
  socialSecurityNumber String? // TAJ szám
  
  // Munkavállalási dátum
  hireDate DateTime?
  
  // Fizetési információk
  salary Float? // alapfizetés
  hourlyRate Float? // órabér
  currency String? @default("HUF")
  
  // Megjegyzések
  notes String?

  // SOFT DELETE támogatás
  deletedAt DateTime? // Ha kitöltött, a user törölve van
  deletedBy String? @db.ObjectId // Ki törölte (CEO/GeneralManager ID)

  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]
  documents Document[]

  // TODO kapcsolatok
  todoAssignments TodoAssignment[] @relation("TodoAssignments")
  createdTodos Todo[] @relation("CreatedBy")

  // Schedule kapcsolatok
  shifts Shift[] @relation("UserShifts")
  createdSchedules WeekSchedule[] @relation("ScheduleCreatedBy")
  shiftRequests ShiftRequest[] @relation("UserShiftRequests")
  actualWorkHours ActualWorkHours[] @relation("UserActualWorkHours")

  @@index([employeeId]) // Egyedi index csak nem-null értékekre
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?
  
  messagesIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Document {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  fileType   String
  fileUrl    String
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Many-to-many kapcsolótábla Todo és User között
model TodoAssignment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  todoId String @db.ObjectId
  todo Todo @relation(fields: [todoId], references: [id], onDelete: Cascade)

  userId String @db.ObjectId
  user User @relation("TodoAssignments", fields: [userId], references: [id], onDelete: Cascade)

  // Egyéni státusz userenként
  status TodoStatus @default(PENDING)
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([todoId, userId])
  @@index([userId])
  @@index([todoId])
  @@index([status])
}

model Todo {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Alapvető információk
  title String
  description String?

  // Státusz és prioritás (globális státusz a teljes TODO-ra)
  status TodoStatus @default(PENDING)
  priority TodoPriority @default(MEDIUM)

  // Dátumok
  startDate DateTime?
  dueDate DateTime?
  completedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Many-to-many kapcsolat a felhasználókkal
  assignments TodoAssignment[]

  createdById String @db.ObjectId
  createdBy User @relation("CreatedBy", fields: [createdById], references: [id])

  // Position kapcsolat - most már referencia
  targetPositionId String? @db.ObjectId
  targetPosition Position? @relation(fields: [targetPositionId], references: [id])

  // Megjegyzések
  notes String?

  @@index([status])
  @@index([dueDate])
  @@index([targetPositionId])
}

// SCHEDULE MODELS - Munkabeosztás kezelése

// Heti beosztás
model WeekSchedule {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Hét kezdete (hétfő)
  weekStart DateTime
  // Hét vége (vasárnap)
  weekEnd DateTime

  // Kérések beküldési határideje (pl. péntek az előző héten)
  requestDeadline DateTime?

  // Ki hozta létre
  createdById String @db.ObjectId
  createdBy User @relation("ScheduleCreatedBy", fields: [createdById], references: [id])

  // Státusz
  isPublished Boolean @default(false) // Publikálva van-e (látják-e a dolgozók)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Kapcsolat a műszakokkal és kérésekkel
  shifts Shift[]
  shiftRequests ShiftRequest[]

  @@index([weekStart])
  @@index([weekEnd])
  @@index([isPublished])
  @@index([requestDeadline])
}

// Műszak - egy adott napon egy dolgozó munkabeosztása
model Shift {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Melyik heti beosztáshoz tartozik
  weekScheduleId String @db.ObjectId
  weekSchedule WeekSchedule @relation(fields: [weekScheduleId], references: [id], onDelete: Cascade)

  // Melyik dolgozó
  userId String @db.ObjectId
  user User @relation("UserShifts", fields: [userId], references: [id], onDelete: Cascade)

  // Melyik pozícióban dolgozik ezen a műszakban
  positionId String @db.ObjectId
  position Position @relation("ShiftPosition", fields: [positionId], references: [id])

  // Kapcsolat a műszak kéréshez (ha kérésből lett létrehozva)
  shiftRequestId String? @db.ObjectId
  shiftRequest ShiftRequest? @relation(fields: [shiftRequestId], references: [id])

  // Dátum és idő
  date DateTime // Melyik nap
  startTime DateTime // Mikor kezd
  endTime DateTime // Mikor végez

  // Számított mező - hány órát dolgozik
  hoursWorked Float? // pl. 8.5 óra

  // Megjegyzések
  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Kapcsolat az actual work hours-hoz
  actualWorkHours ActualWorkHours?

  @@index([weekScheduleId])
  @@index([userId])
  @@index([positionId])
  @@index([date])
  @@index([shiftRequestId])
}

// Műszak kérés - dolgozó által benyújtott műszak igény
model ShiftRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Melyik heti beosztáshoz tartozik
  weekScheduleId String @db.ObjectId
  weekSchedule WeekSchedule @relation(fields: [weekScheduleId], references: [id], onDelete: Cascade)

  // Ki kéri a műszakot
  userId String @db.ObjectId
  user User @relation("UserShiftRequests", fields: [userId], references: [id], onDelete: Cascade)

  // Melyik pozícióra kéri (nullable - GM/CEO tölti ki convert során)
  positionId String? @db.ObjectId
  position Position? @relation("ShiftRequestPosition", fields: [positionId], references: [id])

  // Kérés típusa
  type ShiftRequestType

  // Dátum
  date DateTime

  // Időpontok (csak SPECIFIC_TIME esetén kötelező)
  preferredStartTime DateTime?
  preferredEndTime DateTime?

  // Státusz
  status ShiftRequestStatus @default(PENDING)

  // Megjegyzések
  notes String?
  rejectionReason String? // Ha elutasítva, miért

  // Ki hagyta jóvá/utasította el
  reviewedById String? @db.ObjectId
  reviewedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ha jóváhagyva és műszakká alakítva
  convertedShifts Shift[]

  @@index([weekScheduleId])
  @@index([userId])
  @@index([positionId])
  @@index([date])
  @@index([status])
  @@index([type])
}

// Tényleges munkaidő - ténylegesen ledolgozott órák
model ActualWorkHours {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Melyik műszakhoz tartozik
  shiftId String @unique @db.ObjectId
  shift Shift @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  // Melyik dolgozó (denormalizált az egyszerűbb lekérdezéshez)
  userId String @db.ObjectId
  user User @relation("UserActualWorkHours", fields: [userId], references: [id], onDelete: Cascade)

  // Ténylegesen ledolgozott idő
  actualStartTime DateTime?
  actualEndTime DateTime?
  actualHoursWorked Float? // Számított mező

  // Státusz
  status ActualWorkStatus @default(PRESENT)

  // Megjegyzések
  notes String?

  // Ki rögzítette
  recordedById String? @db.ObjectId
  recordedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
}